---
import doc from "@/../doc.json";
import type { LocaleSubKeys } from "@/util/i18n";
import { getCollection } from "astro:content";
import type { SidebarEntry, SidebarProps } from "./Sidebar.astro";
import SidebarFolder from "./SidebarFolder.astro";
import SidebarLink from "./SidebarLink.astro";

type Props = SidebarProps;

const { sidebarMode, t, lang: pageLang } = Astro.props;
const groups = doc.groups;
const groupsKeys = Object.keys(doc.groups) as (keyof typeof doc.groups)[];

let renderList: SidebarEntry[] = [];
let allOpen = false;

if (sidebarMode === "guides") {
    const guides = await getCollection("guides");
    const sortedGuides = guides.sort((a, b) => a.data.order - b.data.order);

    const guidesByCategory = sortedGuides.reduce((acc, guide) => {
        const [lang, folder] = guide.slug.split("/");
        const folderName = t(`guides.${folder as LocaleSubKeys["guides"]}`);

        if (lang !== pageLang) return acc;

        if (!acc[folderName]) {
            acc[folderName] = [];
        }

        acc[folderName].push(guide);

        return acc;
    }, {} as Record<string, any>);

    renderList = [
        ...Object.keys(guidesByCategory).map((category) => ({
            folder: category,
            linkList: guidesByCategory[category].map((guide: any) => ({
                title: guide.data.title,
                link: `/guides/${guide.slug.split("/")[2]}`,
            })),
        })),
    ];

    allOpen = true;
} else if (sidebarMode === "reference") {
    const categoryLinks: SidebarEntry[] = [];

    groupsKeys.map((groupName) => {
        categoryLinks.push({
            folder: groupName,
            linkList: groups[groupName].entries.map((item: any) => ({
                title: item,
                link: `#${item}`,
            })),
        });
    });

    renderList = [...categoryLinks];
}
---

<>
    {
        renderList?.map(({ linkList, folder }) => (
            <SidebarFolder title={folder} id={folder} isOpen={allOpen}>
                {
                    linkList.map(({ title, link }) => (
                        <SidebarLink
                            {link}
                            lang={pageLang}
                            noTranslate={sidebarMode === "reference"}
                        >
                            {title}</SidebarLink>
                    ))
                }
            </SidebarFolder>
        ))
    }
</>
