---
import doc from "@/../doc.json";
import { getCollection } from "astro:content";
import type { SidebarEntry, SidebarProps } from "./Sidebar.astro";
import SidebarFolder from "./SidebarFolder.astro";
import SidebarLink from "./SidebarLink.astro";

type Props = SidebarProps;

const { sidebarMode } = Astro.props;
const groups = doc.groups;
const groupsKeys = Object.keys(doc.groups) as (keyof typeof doc.groups)[];

let renderList: SidebarEntry[] = [];

if (sidebarMode === "guides") {
    const guides = await getCollection("guides");
    const sortedGuides = guides.sort((a, b) => a.data.order - b.data.order);
    const sortedList = sortedGuides.map(guide => ({
        title: guide.data.title,
        link: `/guides/${guide.slug}`,
    }));

    renderList = [
        {
            folder: "Guides",
            linkList: sortedList,
        },
    ];
} else if (sidebarMode === "reference") {
    const categoryLinks: SidebarEntry[] = [];

    groupsKeys.map((groupName) => {
        categoryLinks.push({
            folder: groupName,
            linkList: groups[groupName].entries.map((item: any) => ({
                title: item,
                link: `#${item}`,
            })),
        });
    });

    renderList = [
        ...categoryLinks,
    ];
}
---

<>
    {
        renderList?.map(({ linkList, folder }) => (
            <SidebarFolder title={folder} id={folder}>
                {
                    linkList.map(({ title, link }) => (
                        <SidebarLink link={link}>
                            {title}
                        </SidebarLink>
                    ))
                }
            </SidebarFolder>
        ))
    }
</>
